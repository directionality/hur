<script src="http://maps.google.com/maps/api/js?sensor=true" type="text/javascript"></script>


<style>
    #map_canvas img {
        max-width: none;
    }
</style>

<!-- This css is to give a nice big popup "info window" when a marker is clicked on the map -->
<style>
    .infoDiv {
        height: 200px;
        width: 300px;
        -webkit-user-select: none;
        background-color: white;
    }
    .hurricane 
    {
        display: block;
        font: black;
    }
    .left {width: 20%; float:left; }
    .right {width: 80%; float: left;}
    .totalpage {width: 100%;}
</style>
<br />
<div class="totalpage">
    <div class="left">
        <div class="leftupper">
            <input id="inputstring" type="text" />
            <button type="submit" onclick="getHurricanes(document.getElementById('inputstring').value)"></button>
        </div>
        <div class="leftlower">

        </div>
    </div>
    <div class="right">
        <!-- This is the div that will contain the Google Map -->
        <div id="map_canvas" style="height: 550px;"></div>
    </div>

</div>


<!-- Enclose the Javascript in a "section" so that it is rendered in the correct order after scripts have been loaded etc -->
@section scripts {
    <section class="scripts">

        <script type="text/javascript">

    <!-- This code tells the browser to execute the "Initialize" method only when the complete document model has been loaded. -->
    var hurricaneData;
    $(document).ready(function () {
        var map;

           

        Initialize();
    });


    function getHurricanes(list)
     {
        
        $.ajax({
            url: 'GetHurricanes',
            data: { 'hurricaneNames': list },
            type: "post",
            cache: false,
            success: function (data) {
                var result = "";
                hurricaneData = data;



                $.each(hurricaneData, function (index, hurricane) {
                    //alert(hurricane.name);

                    var coordinates = new Array();
                    //if (index < 4) {
                    $.each(hurricane.location.Coordinates, function (idx, coordinate) {
                        //alert(hurricane.location.Coordinates[0].Latitude);
                        //alert(hurricane.location.Coordinates[0].Latitude);

                        var obj = { 'lat': coordinate.Latitude, 'lng': coordinate.Longitude };
                        coordinates.push(obj);
                    });

                    result = result + "<div class='hurricane' id='" + hurricane.name + "'>" + hurricane.name + "</div></br>";


                   // alert(coordinates);

                    var strokeColor = ["white", "green", "blue", "yellow", "rose", "red", "orange", "magenta", "lime", "cornflower", "beige"];
                    var number = index % 11;
                   // alert(number);
                    var flightPath = new google.maps.Polyline({
                        path: coordinates,
                        geodesic: true,
                        strokeColor: strokeColor[index % 11],
                        strokeOpacity: 1.0,
                        strokeWeight: 2
                    });

                    flightPath.setMap(map);
                    //}

                });

                $(".leftlower").html(result);





                //alert("coordinates: " + coordinates);




            },
            error: function (xhr, ajaxOptions, thrownError) {
                $('.left').text("Error encountered.");
            }
        });
    }
    // Where all the fun happens
    function Initialize() {

        // Google has tweaked their interface somewhat - this tells the api to use that new UI
        google.maps.visualRefresh = true;
        var Cuba = new google.maps.LatLng(21.52, -77.78);

        // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
        var mapOptions = {
            zoom: 4,
            center: Cuba,
            mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
        };

        // This makes the div with id "map_canvas" a google map
           
            map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
        /*
            $.ajax({
                url: 'GetAllData',
                data: { 'hurricaneName': 'BONNIE_03_2010' },
                type: "post",
                cache: false,              
                success: function (data) {
                    var result = "";
                    hurricaneData = data;

                    

                    $.each(hurricaneData, function (index, hurricane) {
                        //alert(hurricane.name);

                        var coordinates = new Array();
                        //if (index < 4) {
                            $.each(hurricane.location.Coordinates, function (idx, coordinate) {
                                //alert(hurricane.location.Coordinates[0].Latitude);
                                //alert(hurricane.location.Coordinates[0].Latitude);

                                var obj = { 'lat': coordinate.Latitude, 'lng': coordinate.Longitude };
                                coordinates.push(obj);
                            });

                            result = result + "<div class='hurricane' id='" + hurricane.name +"'>" + hurricane.name + "</div></br>";
                           

                            alert(coordinates);

                            var strokeColor = ["white", "green", "blue", "yellow", "rose", "red", "orange", "magenta", "lime", "cornflower", "beige"];
                            var number = index % 11;
                            alert(number);
                            var flightPath = new google.maps.Polyline({
                                path: coordinates,
                                geodesic: true,
                                strokeColor: strokeColor[index%11],
                                strokeOpacity: 1.0,
                                strokeWeight: 2
                            });

                            //flightPath.setMap(map);
                        //}

                    });

                    $(".leftlower").html(result);

                

                   

            //alert("coordinates: " + coordinates);

                    
                   

                },
                error: function (xhr, ajaxOptions, thrownError) {
                    $('.left').text("Error encountered.");
                }
            });
        */
           

        // a sample list of JSON encoded data of places to visit in Tunisia
        // you can either make up a JSON list server side, or call it from a controller using JSONResult
       /* var data = [
                  { "Id": 1, "PlaceName": "Zaghouan", "GeoLong": "36.401081", "GeoLat": "10.16596" },
                  { "Id": 2, "PlaceName": "Hammamet ", "GeoLong": "36.4", "GeoLat": "10.616667" },
                  { "Id": 3, "PlaceName": "Sousse", "GeoLong": "35.8329809", "GeoLat": "10.63875" },
                  { "Id": 4, "PlaceName": "Sfax", "GeoLong": "34.745159", "GeoLat": "10.7613" }
               ];

        // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins
        $.each(data, function (i, item) {
            var marker = new google.maps.Marker({
                'position': new google.maps.LatLng(item.GeoLong, item.GeoLat),
                'map': map,
                'title': item.PlaceName
            });

            // Make the marker-pin blue!
            marker.setIcon('http://maps.google.com/mapfiles/ms/icons/blue-dot.png')

            // put in some information about each json object - in this case, the opening hours.
            var infowindow = new google.maps.InfoWindow({
                content: "<div class='infoDiv'><h2>" + item.PlaceName + "</div></div>"
            });

            // finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
            google.maps.event.addListener(marker, 'click', function () {
                infowindow.open(map, marker);
            });
      

        })
          */
    }


        </script>
    </section>
}
